<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>keoy</title>
  
  <subtitle>keoy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://keoy.xyz/"/>
  <updated>2019-02-25T15:34:59.738Z</updated>
  <id>https://keoy.xyz/</id>
  
  <author>
    <name>keoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise对象入门</title>
    <link href="https://keoy.xyz/2019/02/22/promiss/"/>
    <id>https://keoy.xyz/2019/02/22/promiss/</id>
    <published>2019-02-22T15:35:00.000Z</published>
    <updated>2019-02-25T15:34:59.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><p>promise对象可以获取异步操作的消息，提供统一的API,各个异步操作都可以用同样的方法进行处理。<br>promise对象不受外界影响，其有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（成功）、<code>rejected</code>（失败），只有异步操作的结果可以决定当前状态，一旦状态改变就不可以再变化，状态改变方向有两种：<code>pending</code> -&gt; <code>fulfilled</code>、<code>pending</code> -&gt; <code>rejected</code><br>promise对象的意义就在于将异步操作以同步操作的流程表达，避免层层嵌套的回调函数  </p><a id="more"></a><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> () &#123;</span><br><span class="line">    resolve(value) <span class="comment">// 异步操作成功</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error) <span class="comment">// 失败抛错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数有两个参数：<code>resolve</code>、<code>reject</code>，当执行<code>resolve</code>函数时<code>Promise</code>对象状态<code>pending</code> -&gt; <code>fulfilled</code>，当执行reject时Promise对象状态<code>pending</code> -&gt; <code>rejected</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数，第二个参数为可选参数，例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise'</span>)</span><br><span class="line">  resolve(<span class="string">'11'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'22'</span>)</span><br></pre></td></tr></table></figure><p>执行结果’promise -&gt; 22 -&gt; 11’,promise对象新建后立即执行，<code>then</code>方法的回调会在所有同步任务执行完成后执行  </p><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p><code>promise.prototype.catch()</code>是<code>then()</code>方法的别名，用于指定发生错误时的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果异步操作抛出错误，状态就会变为<code>reject</code>，就会调用<code>catch</code>中的回调，当状态为<code>resolve</code>，执行<code>then</code>方法中的回调时，若报错同样回进入<code>catch</code>的回调<br>意义：当我们使用promise异步操作时，但是没有使用<code>catch</code>捕获错误时，若promise异步执行报错时，外部代码并不会接收到错误，而是继续执行不受影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">someAsyncThing().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'continue'</span>) &#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>如代码所示，<code>x</code>变量并没有定义，期待的操作是执行报错，然后停止运行，实际上<code>continue</code>会执行输出，这说明当没有catch捕获错误时，外部代码不会知道Promise对象内部执行已经报错，因此会继续执行。</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>不管Promise对象最后结果如何，都会执行的操作，<code>finally</code>方法中的回调函数不接受任何参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p><code>Promise.all</code>方法用于将多个Promise实例包装成一个新的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。<br>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;promise对象可以获取异步操作的消息，提供统一的API,各个异步操作都可以用同样的方法进行处理。&lt;br&gt;promise对象不受外界影响，其有三种状态：&lt;code&gt;pending&lt;/code&gt;（进行中）、&lt;code&gt;fulfilled&lt;/code&gt;（成功）、&lt;code&gt;rejected&lt;/code&gt;（失败），只有异步操作的结果可以决定当前状态，一旦状态改变就不可以再变化，状态改变方向有两种：&lt;code&gt;pending&lt;/code&gt; -&amp;gt; &lt;code&gt;fulfilled&lt;/code&gt;、&lt;code&gt;pending&lt;/code&gt; -&amp;gt; &lt;code&gt;rejected&lt;/code&gt;&lt;br&gt;promise对象的意义就在于将异步操作以同步操作的流程表达，避免层层嵌套的回调函数  &lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://keoy.xyz/tags/javascript/"/>
    
      <category term="promiss" scheme="https://keoy.xyz/tags/promiss/"/>
    
  </entry>
  
  <entry>
    <title>一道JS闭包面试题</title>
    <link href="https://keoy.xyz/2019/02/22/bibao/"/>
    <id>https://keoy.xyz/2019/02/22/bibao/</id>
    <published>2019-02-22T14:35:00.000Z</published>
    <updated>2019-02-25T15:35:07.755Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>最近看到这样一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(o);</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">       fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> fun(m,n);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>);a.fun(<span class="number">1</span>);a.fun(<span class="number">2</span>);a.fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>);c.fun(<span class="number">2</span>);c.fun(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//问:三行a,b,c的输出分别是什么？</span></span><br></pre></td></tr></table></figure><p>觉得有点意思，和大家一起来聊聊。<br><a id="more"></a><br>我相信如果你不是非常理解JavaScript中的闭包，一定是不想看这段代码的。  </p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>好的，我们暂时先不去想这段代码，先看点简单的  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun0</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fun0();    <span class="comment">//1</span></span><br><span class="line">fun1();    <span class="comment">//报错 a is not defined</span></span><br></pre></td></tr></table></figure><p>这段代码，我相信大家应该知道最后为什么结果会是 1 和 报错 的，在函数内声明的变量只在函数体内定义，它们是局部变量，作用域是局部的，所以 函数 fun1 调用后，找不到a，就报错了，JavaScript采用词法作用域，函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，所以我们只要改改上面函数 fun1的位置，它就不会报错了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun0</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把fun1放在fun0中，就不报错了</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fun1();   <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">fun0();   <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>代码改成这样，只是把fun1 放在 fun0 中就不报错了，函数调用后都输出1<br>好了，我们来看最开始提到的代码，先简化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看这段代码，fun 调用后会怎么样？<br>很明显会返回一个空对象，记住，fun调用后会返回对象，这点很重要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fun(m,n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> a = fun(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这里提一句，当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。<br><code>console.log(o);</code> 输出undefined<br><code>var a = fun(0);</code> 那a是值是什么，是fun(0)，返回的那个对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(m,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个对象，有一个fun的方法，方法返回的结果就是最外面 fun 调用的结果。<br><img src="/img/asda.png" alt="结果"></p><p><code>var a=fun(0)</code>，传入一个参数0，那就是说，函数fun中参数 n 的值是0了，而返回的那个对象中，需要一个参数n，而这个对象的作用域中没有n，它就继续沿着作用域向上一级的作用域中寻找n，最后在函数fun中找到了n，n的值是0，这段话是本文的重点， 明白这段，那问题就容易解决了。<br><br><br>说到这里，这道题基本上可以解决了，希望大家能听明白我上面说的话，下面的就简单了。我们一步一步看。<br><br><br>现在我们知道 a 是  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(m,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的一个对象<br><code>a.fun(1);</code> 会怎么样？看代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params"><span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a.fun(1);</code> 返回的结果，就是 fun(1,0)，返回的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123; <span class="comment">//n的值为1，o的值为0</span></span><br><span class="line">        <span class="built_in">console</span>.log(o);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fun(m,n);<span class="comment">//n的值为1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">0</span>);  <span class="comment">//输出0，并返回一个对象，这个对象有一个fun的方法,这个方法调用后，会返回外层fun函数调用的结果，并且外层函数的第二个参数是 n 的值，也就是1</span></span><br></pre></td></tr></table></figure><p><code>a.fun(2);</code> 会怎么样？看代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params"><span class="number">2</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a.fun(2);</code> 返回的结果，就是 fun(2,0)，返回的结果  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123; <span class="comment">//n的值为2，o的值为0</span></span><br><span class="line">        <span class="built_in">console</span>.log(o);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fun(m,n); <span class="comment">//n的值为2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">2</span>,<span class="number">0</span>);  <span class="comment">//输出0，并返回一个对象，这个对象有一个fun的方法,这个方法调用后，会返回外层fun函数调用的结果，并且外层函数的第二个参数是 n 的值，也就是2</span></span><br></pre></td></tr></table></figure><p><code>a.fun(3);</code> 就不说了，一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); a.fun(<span class="number">1</span>); a.fun(<span class="number">2</span>); a.fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>把返回的对象，重新赋值给a，这样两行的结果就是一样的了。<br><code>var c = fun(0).fun(1); c.fun(2); c.fun(3);</code><br>c 与他们的不同，只是<code>var c = fun(0).fun(1);</code> 之后用的是同一个对象罢了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>说下结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); a.fun(<span class="number">1</span>); a.fun(<span class="number">2</span>); a.fun(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//undefined 0 0 0 </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//undefined 0 1 2</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>); c.fun(<span class="number">2</span>); c.fun(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//undefined 0 1 1</span></span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/xxcanghai/p/4991870.html" target="_blank" rel="noopener">转载来自http://www.cnblogs.com/xxcanghai/p/4991870.html</a><br>顺便推荐几篇讲解闭包的文章<br><br><br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习Javascript闭包（Closure）</a><br><a href="http://kb.cnblogs.com/page/110782/" target="_blank" rel="noopener">Javascript闭包——懂不懂由你，反正我是懂了 </a><br><a href="http://blog.csdn.net/yanghua_kobe/article/details/6780181" target="_blank" rel="noopener">JS闭包可被利用的常见场景</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;最近看到这样一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n,o&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       fun:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;m&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fun(m,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = fun(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);a.fun(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);a.fun(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);a.fun(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = fun(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).fun(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).fun(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).fun(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = fun(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).fun(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);c.fun(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);c.fun(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//问:三行a,b,c的输出分别是什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;觉得有点意思，和大家一起来聊聊。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://keoy.xyz/tags/javascript/"/>
    
      <category term="闭包" scheme="https://keoy.xyz/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://keoy.xyz/2019/01/17/hello-world/"/>
    <id>https://keoy.xyz/2019/01/17/hello-world/</id>
    <published>2019-01-17T15:16:21.298Z</published>
    <updated>2019-02-25T13:01:35.201Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a> </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://keoy.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>welcome</title>
    <link href="https://keoy.xyz/2019/01/17/test/"/>
    <id>https://keoy.xyz/2019/01/17/test/</id>
    <published>2019-01-17T08:00:00.000Z</published>
    <updated>2019-02-25T13:03:06.234Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> _            _       _____      _          ___       _____       _          _       _____</span><br><span class="line">( )    /\    ( )     ( ____)    ( )        / _ \     (  _  )     ( )        ( )     ( ____)</span><br><span class="line"> \ \  /  \  / /      | |___     | |       | ( (_)    | | | |     |   \    /   |     | |___</span><br><span class="line">  \ \/    \/ /       |  ___)    | |       | |  _     | | | |     | |\ \  / /| |     |  ___)</span><br><span class="line">   \   /\   /        | |___     | |____   | (_( )    | |_| |     | | \ \/ / | |     | |___</span><br><span class="line">    \_/  \_/         (_____)    (______)   \___/     (_____)     (_)  \__/  (_)     (_____)</span><br></pre></td></tr></table></figure><a id="more"></a> ]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; _            _       _____      _          ___       _____       _          _       _____&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;( )    /\    ( )     ( ____)    ( )        / _ \     (  _  )     ( )        ( )     ( ____)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; \ \  /  \  / /      | |___     | |       | ( (_)    | | | |     |   \    /   |     | |___&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  \ \/    \/ /       |  ___)    | |       | |  _     | | | |     | |\ \  / /| |     |  ___)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   \   /\   /        | |___     | |____   | (_( )    | |_| |     | | \ \/ / | |     | |___&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \_/  \_/         (_____)    (______)   \___/     (_____)     (_)  \__/  (_)     (_____)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="welcome" scheme="https://keoy.xyz/tags/welcome/"/>
    
  </entry>
  
</feed>
